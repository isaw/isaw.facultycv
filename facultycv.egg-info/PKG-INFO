Metadata-Version: 1.0
Name: facultycv
Version: 0.4
Summary: FacultyCV allows Faculty or Staff to post their CV's online
Home-page: http://svn.plone.org/svn/collective/
Author: UNKNOWN
Author-email: UNKNOWN
License: GPL
Description: .. contents::
        
        .. Note!
           -----
        - Code repository: git://github.com/christophwarner/FacultyCV.git
        - Questions and comments to http://github.com/christophwarner/FacultyCV/issues
        - Report bugs at http://github.com/christophwarner/FacultyCV/issues
        
        
        Change history
        **************
        
        Changelog
        =========
        
        0.4 (2010-06-30)
        ----------------
        
        - Created project
        
        Detailed Documentation
        **********************
        
        Introduction
        ============
        
        This is a full-blown functional test. The emphasis here is on testing what
        the user may input and see, and the system is largely tested as a black box.
        We use PloneTestCase to set up this test as well, so we have a full Plone site
        to play with. We *can* inspect the state of the portal, e.g. using 
        self.portal and self.folder, but it is often frowned upon since you are not
        treating the system as a black box. Also, if you, for example, log in or set
        roles using calls like self.setRoles(), these are not reflected in the test
        browser, which runs as a separate session.
        
        Being a doctest, we can tell a story here.
        
        First, we must perform some setup. We use the testbrowser that is shipped
        with Five, as this provides proper Zope 2 integration. Most of the 
        documentation, though, is in the underlying zope.testbrower package.
        
            >>> from Products.Five.testbrowser import Browser
            >>> browser = Browser()
            >>> portal_url = self.portal.absolute_url()
        
        The following is useful when writing and debugging testbrowser tests. It lets
        us see all error messages in the error_log.
        
            >>> self.portal.error_log._ignored_exceptions = ()
        
        With that in place, we can go to the portal front page and log in. We will
        do this using the default user from PloneTestCase:
        
            >>> from Products.PloneTestCase.setup import portal_owner, default_password
        
            >>> browser.open(portal_url)
        
        We have the login portlet, so let's use that.
        
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
        
        Here, we set the value of the fields on the login form and then simulate a
        submit click.
        
        We then test that we are still on the portal front page:
        
            >>> browser.url == portal_url
            True
        
        And we ensure that we get the friendly logged-in message:
        
            >>> "You are now logged in" in browser.contents
            True
        
        
        -*- extra stuff goes here -*-
        The profile content type
        ===============================
        
        In this section we are tesing the profile content type by performing
        basic operations like adding, updadating and deleting profile content
        items.
        
        Adding a new profile content item
        --------------------------------
        
        We use the 'Add new' menu to add a new content item.
        
            >>> browser.getLink('Add new').click()
        
        Then we select the type of item we want to add. In this case we select
        'profile' and click the 'Add' button to get to the add form.
        
            >>> browser.getControl('profile').click()
            >>> browser.getControl(name='form.button.Add').click()
            >>> 'profile' in browser.contents
            True
        
        Now we fill the form and submit it.
        
            >>> browser.getControl(name='title').value = 'profile Sample'
            >>> browser.getControl('Save').click()
            >>> 'Changes saved' in browser.contents
            True
        
        And we are done! We added a new 'profile' content item to the portal.
        
        Updating an existing profile content item
        ---------------------------------------
        
        Let's click on the 'edit' tab and update the object attribute values.
        
            >>> browser.getLink('Edit').click()
            >>> browser.getControl(name='title').value = 'New profile Sample'
            >>> browser.getControl('Save').click()
        
        We check that the changes were applied.
        
            >>> 'Changes saved' in browser.contents
            True
            >>> 'New profile Sample' in browser.contents
            True
        
        Removing a/an profile content item
        --------------------------------
        
        If we go to the home page, we can see a tab with the 'New profile
        Sample' title in the global navigation tabs.
        
            >>> browser.open(portal_url)
            >>> 'New profile Sample' in browser.contents
            True
        
        Now we are going to delete the 'New profile Sample' object. First we
        go to the contents tab and select the 'New profile Sample' for
        deletion.
        
            >>> browser.getLink('Contents').click()
            >>> browser.getControl('New profile Sample').click()
        
        We click on the 'Delete' button.
        
            >>> browser.getControl('Delete').click()
            >>> 'Item(s) deleted' in browser.contents
            True
        
        So, if we go back to the home page, there is no longer a 'New profile
        Sample' tab.
        
            >>> browser.open(portal_url)
            >>> 'New profile Sample' in browser.contents
            False
        
        Adding a new profile content item as contributor
        ------------------------------------------------
        
        Not only site managers are allowed to add profile content items, but
        also site contributors.
        
        Let's logout and then login as 'contributor', a portal member that has the
        contributor role assigned.
        
            >>> browser.getLink('Log out').click()
            >>> browser.open(portal_url)
            >>> browser.getControl(name='__ac_name').value = 'contributor'
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
            >>> browser.open(portal_url)
        
        We use the 'Add new' menu to add a new content item.
        
            >>> browser.getLink('Add new').click()
        
        We select 'profile' and click the 'Add' button to get to the add form.
        
            >>> browser.getControl('profile').click()
            >>> browser.getControl(name='form.button.Add').click()
            >>> 'profile' in browser.contents
            True
        
        Now we fill the form and submit it.
        
            >>> browser.getControl(name='title').value = 'profile Sample'
            >>> browser.getControl('Save').click()
            >>> 'Changes saved' in browser.contents
            True
        
        Done! We added a new profile content item logged in as contributor.
        
        Finally, let's login back as manager.
        
            >>> browser.getLink('Log out').click()
            >>> browser.open(portal_url)
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
            >>> browser.open(portal_url)
        
        
        The CV content type
        ===============================
        
        In this section we are tesing the CV content type by performing
        basic operations like adding, updadating and deleting CV content
        items.
        
        Adding a new CV content item
        --------------------------------
        
        We use the 'Add new' menu to add a new content item.
        
            >>> browser.getLink('Add new').click()
        
        Then we select the type of item we want to add. In this case we select
        'CV' and click the 'Add' button to get to the add form.
        
            >>> browser.getControl('CV').click()
            >>> browser.getControl(name='form.button.Add').click()
            >>> 'CV' in browser.contents
            True
        
        Now we fill the form and submit it.
        
            >>> browser.getControl(name='title').value = 'CV Sample'
            >>> browser.getControl('Save').click()
            >>> 'Changes saved' in browser.contents
            True
        
        And we are done! We added a new 'CV' content item to the portal.
        
        Updating an existing CV content item
        ---------------------------------------
        
        Let's click on the 'edit' tab and update the object attribute values.
        
            >>> browser.getLink('Edit').click()
            >>> browser.getControl(name='title').value = 'New CV Sample'
            >>> browser.getControl('Save').click()
        
        We check that the changes were applied.
        
            >>> 'Changes saved' in browser.contents
            True
            >>> 'New CV Sample' in browser.contents
            True
        
        Removing a/an CV content item
        --------------------------------
        
        If we go to the home page, we can see a tab with the 'New CV
        Sample' title in the global navigation tabs.
        
            >>> browser.open(portal_url)
            >>> 'New CV Sample' in browser.contents
            True
        
        Now we are going to delete the 'New CV Sample' object. First we
        go to the contents tab and select the 'New CV Sample' for
        deletion.
        
            >>> browser.getLink('Contents').click()
            >>> browser.getControl('New CV Sample').click()
        
        We click on the 'Delete' button.
        
            >>> browser.getControl('Delete').click()
            >>> 'Item(s) deleted' in browser.contents
            True
        
        So, if we go back to the home page, there is no longer a 'New CV
        Sample' tab.
        
            >>> browser.open(portal_url)
            >>> 'New CV Sample' in browser.contents
            False
        
        Adding a new CV content item as contributor
        ------------------------------------------------
        
        Not only site managers are allowed to add CV content items, but
        also site contributors.
        
        Let's logout and then login as 'contributor', a portal member that has the
        contributor role assigned.
        
            >>> browser.getLink('Log out').click()
            >>> browser.open(portal_url)
            >>> browser.getControl(name='__ac_name').value = 'contributor'
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
            >>> browser.open(portal_url)
        
        We use the 'Add new' menu to add a new content item.
        
            >>> browser.getLink('Add new').click()
        
        We select 'CV' and click the 'Add' button to get to the add form.
        
            >>> browser.getControl('CV').click()
            >>> browser.getControl(name='form.button.Add').click()
            >>> 'CV' in browser.contents
            True
        
        Now we fill the form and submit it.
        
            >>> browser.getControl(name='title').value = 'CV Sample'
            >>> browser.getControl('Save').click()
            >>> 'Changes saved' in browser.contents
            True
        
        Done! We added a new CV content item logged in as contributor.
        
        Finally, let's login back as manager.
        
            >>> browser.getLink('Log out').click()
            >>> browser.open(portal_url)
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
            >>> browser.open(portal_url)
        
        
        
        
        Contributors
        ************
        
        Primary Authors
        Rafael Nunez <rnunez@less.spam.york.cuny.edu>
        Christopher Warner <christopher.warner@less.spam.nyu.edu>
        
        Download
        ********
        
Keywords: cv resume facultycv
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
